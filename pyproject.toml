[build-system]
requires = ["poetry-core (>=2.0.0)", "poetry-dynamic-versioning (>=1.5.2,<2.0.0)"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
requires-poetry = ">=2.0.0"
packages = [ { include="apologies", from="src" } ]
include = [
   { path='Changelog', format='sdist' },
   { path='NOTICE', format='sdist' },
   { path='LICENSE', format='sdist' },
   { path='README.md', format='sdist' },
   { path='docs', format='sdist' },
   { path='src/tests', format='sdist' },
]
classifiers = [
   "Operating System :: OS Independent",
   "Environment :: Console",
   "Intended Audience :: Developers",
   "Natural Language :: English",
   "Topic :: Games/Entertainment :: Board Games",
   "Topic :: Software Development :: Libraries",
]
version = "0.0.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version=">=1.5.2,<2.0.0", extras=["plugin"] }

# Published version is managed using Git tags
# We get either the tag (like "0.24.1") or a snapshot-type version (like "0.24.1+3.e8319c4")
[tool.poetry-dynamic-versioning]
enable = true
pattern = '^[vV](?P<base>\d+\.\d+\.\d+)'  # this extracts the version from our vX.Y.Z tag format
format-jinja = "{% if distance == 0 and not dirty %}{{ base }}{% else %}{{ base }}+{{ distance }}.{{ commit }}{% endif %}"

[project]
name = "apologies"
requires-python = ">=3.10,<4"
description = "Python code to play a game similar to Sorry"
authors = [ { name="Kenneth J. Pronovici", email="pronovic@ieee.org" } ]
license = "Apache-2.0"
readme = "PyPI.md"
dynamic = [ "classifiers", "version" ]
dependencies = [
   "attrs (>=24.2.0)",
   "cattrs (>=24.1.2)",
   "arrow (>=1.3.0,<2.0.0)",
]

[project.urls]
homepage = "https://pypi.org/project/apologies/"
repository = "https://github.com/pronovic/apologies"

[project.optional-dependencies]
docs = [
   "importlib-metadata (>=8.5.0,<9.0.0)",
   "sphinx (>=8.1.3,<9.0.0)",
   "sphinx-autoapi (>=3.3.3,<4.0.0)",
]

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.2,<9.0.0"
pytest-testdox = ">=3.1.0,<4.0.0"
coverage = ">=7.4.4,<8.0.0"
pre-commit = ">=4.0.1,<5.0.0"
mypy = ">=1.6.0,<2.0.0"
click = ">=8.1.7,<9.0.0"
colorama = ">=0.4.6,<1.0.0"
ruff = "^0.12.10"

[tool.coverage.paths]
source = [ "src" ]

[tool.coverage.run]
branch = true
source = [ "src/apologies" ]

[tool.coverage.report]
show_missing = false
precision = 1

[tool.pytest.ini_options]
filterwarnings = [
    'error',  # turn all Python warnings into test failures, so they're hard to miss
    'ignore:datetime.datetime.utcfromtimestamp\(\) is deprecated:DeprecationWarning',
]

[tool.ruff]
src = ["src"]
extend-exclude = [ "docs", "notes", ".poetry" ]
line-length = 132
preview = true

[tool.ruff.format]
quote-style = "double"
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"
parametrize-values-type = "list"
parametrize-values-row-type = "list"

# Note: requires TID251 to be selected below
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"conftest".msg = "use 'tests.conftest' instead"
"unittest.TestCase".msg = "use pytest, not unittest"

[tool.ruff.lint]
select = [
  # Start with all Ruff linter rules, and exclude some specific rules and categories (see below)
  "ALL"
]

ignore = [
  # Ruff-recommended exclusions, not needed because we're using the Ruff formatter
  "COM812",     # missing-trailing-comma
  "COM819",     # prohibited-trailing-comma
  "D206",       # docstring-tab-indentation
  "D300",       # triple-single-quotes
  "E111",       # indentation-with-invalid-multiple
  "E114",       # indentation-with-invalid-multiple-comment
  "E117",       # over-indented
  "E501",       # line-too-long
  "Q000",       # bad-quotes-inline-string
  "Q001",       # bad-quotes-multiline-string
  "Q002",       # bad-quotes-docstring
  "Q003",       # avoidable-escaped-quote
  "W191",       # tab-indentation

  # Exclusions of entire rule categories, which we don't think are worth enforcing
  "C90",        # mccabe cyclomatic complexity
  "CPY",        # flake8-copyright
  "D",          # pydocstyle
  "DJ",         # flake8-django
  "DOC",        # pydoclint
  "EXE",        # flake8-executable
  "FIX",        # flake8-fixme
  "TD",         # flake8-todo

  # Exclusions of specific rules, which we don't think are worth enforcing
  "ANN401",     # allow dynamically typed expressions using `typing.Any`
  "EM101",      # allow raw string messages in exceptions; having to pull out a variable makes code harder to read
  "EM102",      # allow f-string messages in exceptions; having to pull out a variable makes code harder to read
  "FURB140",    # don't automatically convert generator expressions to use `itertools.starmap()`
  "PGH004",     # allow `# noqa` with no error code; sometimes this is needed to prevent unwanted magical auto-fixes
  "PLR2004",    # allow magic numbers; using a constant doesn't necessarily make a magic number any more legible
  "PT011",      # allow `pytest.raises` for any exception type; this is often a false-positive that has little benefit
  "PT018",      # allow `assert` with multiple conditions; ruff suggestions often make the code less legible
  "PT019",      # allow unused PyTest fixtures; this check has a lot of false positives for `@unittest.mock.patch()`
  "S101",       # allow use of `assert`; we sometimes use assert as a type hint for MyPy, and do not run with -O
  "S404",       # allow use of `subprocess`; it's a common way to run shell commands, and this check is overly paranoid
  "SIM102",     # allow nested `if` clauses; ruff suggestions often make the code less legible
  "SIM117",     # allow nested `with` clauses; ruff suggestions often make the code less legible
  "TRY003",     # allow long messages in exceptions; this is often a false-positive that has little benefit
]

[tool.ruff.lint.per-file-ignores]
"src/tests/**/*" = [
  # Exclusions that apply to unit tests only
  "ANN",        # don't require type annotations in tests
  "FBT",        # allow use of boolean positional arguments
  "PLC1901",    # allow comparison to empty string
  "PLC2701",    # allow imports of private names
  "PLR",        # don't warn about too many arguments, methods, etc.
  "SLF001",     # allow access to private members
]

[tool.mypy]
files = [ "src" ]
pretty = true
show_absolute_path = true
show_column_numbers = true
show_error_codes = true
# Settings equivalent to strict=true as of v1.17.1
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
extra_checks = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
# Additional settings above and beyond strict=true
implicit_optional = false
strict_optional = true
warn_no_return = true
warn_unreachable = true

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = "tests.*"
check_untyped_defs = false
allow_untyped_defs = true

# It's hard to make ncurses code compliant
[[tool.mypy.overrides]]
module = [ "apologies.demo", "apologies.demo_unix", "apologies.demo_windows" ]
ignore_errors = true
