# vim: set ft=yaml ts=2 sw=2:
name: Test Suite
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: '05 17 15 * *'  # 15th of the month at 5:05pm UTC
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.7", "3.8", "3.9", "3.10" ]
    runs-on: ${{ matrix.os }}
    env:
      # Run builds using a specific version of Poetry, to avoid surprises
      POETRY_VERSION: "1.2.0"
      # Prevent Poetry v1.2.0 from using the Python keyring, which sometimes fails or hangs on Linux
      # See: https://github.com/python-poetry/poetry/issues/2692#issuecomment-1235683370
      PYTHON_KEYRING_BACKEND: "keyring.backends.null.Keyring"
    steps: 
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Platform information
        shell: bash
        run: |
          # Show platform information
          python -c "import sys;print('Python %s' % sys.version)"
      - name: Install Poetry
        uses: snok/install-poetry@v1.2.1 # see https://github.com/snok/install-poetry
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install Poetry plugins
        shell: bash
        run: |
          # Install Poetry plugins
          poetry self add poetry-plugin-export
      - name: Cache Poetry dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        shell: bash
        run: |
          # Install dependencies
          poetry install --sync
      - name: Upgrade embedded tools within virtualenv
        shell: bash
        run: |
          # Upgrade embedded tools
          poetry run pip install --upgrade pip setuptools wheel
      - name: Run Tox test suite
        shell: bash
        run: |
          # Run Tox test suite
          poetry run tox -c .toxrc -e "checks,coverage"
      - name: Upload coverage data to coveralls.io
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ runner.os }}-python${{ matrix.python }}
          COVERALLS_PARALLEL: true
        run: | 
          # Upload coverage data to coveralls.io
          poetry run coveralls --service=github
  coveralls:
    name: Indicate completion to coveralls.io
    needs: build
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Finished
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Indicate completion to coveralls.io
        pip3 install --upgrade coveralls
        coveralls --service=github --finish
